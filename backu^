import 'dart:math';
import 'dart:typed_data';
import 'dart:io';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:share_plus/share_plus.dart';
import 'package:image_gallery_saver/image_gallery_saver.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:path_provider/path_provider.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(const WallpaperApp());
}

class WallpaperApp extends StatelessWidget {
  const WallpaperApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wallpaper App',
      theme: ThemeData.dark(),
      debugShowCheckedModeBanner: false,
      home: const HomePage(),
    );
  }
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Main Menu")),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (_) => const GalleryPage()),
            );
          },
          child: const Text("Wallpapers"),
        ),
      ),
    );
  }
}

class GalleryPage extends StatefulWidget {
  const GalleryPage({super.key});

  @override
  State<GalleryPage> createState() => _GalleryPageState();
}

class _GalleryPageState extends State<GalleryPage> {
  List<String> imageUrls = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    fetchWallpapers();
  }

  Future<void> fetchWallpapers() async {
    final url = "https://cdn.jsdelivr.net/gh/Oussamaabjx/wallpapers@main/wallpapers.json";
    final response = await http.get(Uri.parse(url));

    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(response.body);
      setState(() {
        imageUrls = List<String>.from(data);
        isLoading = false;
      });
    } else {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load wallpapers (${response.statusCode})')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
  appBar: AppBar(
  title: const Text("Wallpapers"),
  titleTextStyle: const TextStyle(
    color: Color(0xFFC471ED),
    fontSize: 20,
    fontWeight: FontWeight.bold,
  ),
  iconTheme: const IconThemeData(
    color: Color(0xFFC471ED), // arrow color
  ),
),

      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : GridView.builder(
              padding: const EdgeInsets.all(8),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2, crossAxisSpacing: 8, mainAxisSpacing: 8,
              ),
              itemCount: imageUrls.length,
              itemBuilder: (context, index) {
                return InkWell(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (_) => WallpaperView(
                          wallpapers: imageUrls,
                          currentIndex: index,
                        ),
                      ),
                    );
                  },
                  child: Image.network(
                    imageUrls[index],
                    fit: BoxFit.cover,
                    loadingBuilder: (c, child, p) =>
                        p == null ? child : const Center(child: CircularProgressIndicator()),
                    errorBuilder: (c, e, st) => const Center(child: Icon(Icons.broken_image)),
                  ),
                );
              },
            ),
    );
  }
}

class WallpaperView extends StatefulWidget {
  final List<String> wallpapers;
  final int currentIndex;

  const WallpaperView({
    super.key,
    required this.wallpapers,
    required this.currentIndex,
  });

  @override
  State<WallpaperView> createState() => _WallpaperViewState();
}

class _WallpaperViewState extends State<WallpaperView> {
  late int index;
  final Color borderColor = const Color(0xFFC471ED);

  @override
  void initState() {
    super.initState();
    index = widget.currentIndex;
  }

  Future<Uint8List> _downloadCurrentBytes() async {
    final url = widget.wallpapers[index];
    final res = await http.get(Uri.parse(url));
    if (res.statusCode != 200) {
      throw Exception('Failed to download image');
    }
    return res.bodyBytes;
  }

Future<void> _saveImage() async {
  try {
    // iOS 14+: prefer add-only permission if available; otherwise fall back
    var status = await Permission.photosAddOnly.request();
    if (!status.isGranted) {
      // Fallback for older iOS / denial
      status = await Permission.photos.request();
    }
    if (!status.isGranted) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Photo permission denied')),
      );
      return;
    }

    final bytes = await _downloadCurrentBytes();

    // Give the plugin a clear hint about what we're saving
    final result = await ImageGallerySaver.saveImage(
      bytes,
      name: 'wallpaper_${DateTime.now().millisecondsSinceEpoch}',
      quality: 100, // JPG quality hint (still works for PNG)
    );

    // The plugin returns a Map like {isSuccess: true, filePath: ...} on iOS
    final success = (result is Map) && (result['isSuccess'] == true);
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(success
              ? 'Saved to Photos (check Recents).'
              : 'Save failed. Try again or test on a real device.'),
        ),
      );
    }
  } catch (e) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Save failed: $e')),
      );
    }
  }
}


  Future<void> _shareImage() async {
    try {
      final bytes = await _downloadCurrentBytes();
      final tempDir = await getTemporaryDirectory();
      final file = File('${tempDir.path}/share_wallpaper.png');
      await file.writeAsBytes(bytes);
      await Share.shareXFiles([XFile(file.path)], text: 'Check out this wallpaper!');
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Share failed: $e')),
        );
      }
    }
  }

  void _nextImage() => setState(() => index = (index + 1) % widget.wallpapers.length);
  void _prevImage() => setState(() => index = (index - 1 + widget.wallpapers.length) % widget.wallpapers.length);
  void _randomImage() => setState(() => index = Random().nextInt(widget.wallpapers.length));

ButtonStyle _buttonStyle() {
  return ElevatedButton.styleFrom(
    backgroundColor: Colors.black.withOpacity(0.3),
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(30),
      side: BorderSide(color: borderColor, width: 2),
    ),
    foregroundColor: borderColor,
  ).copyWith(
    overlayColor: MaterialStateProperty.all(borderColor.withOpacity(0.2)),
  );
}


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.network(widget.wallpapers[index], fit: BoxFit.cover),
          Positioned(
            top: 40,
            left: 16,
            child: IconButton(
              icon: const Icon(Icons.close, color: Color(0xFFC471ED), size: 30),
              onPressed: () => Navigator.pop(context),
            ),
          ),
          // Left arrow
          Positioned(
            left: 10,
            top: MediaQuery.of(context).size.height / 2 - 30,
            child: Container(
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.4),
                shape: BoxShape.circle,
              ),
              child: IconButton(
                padding: EdgeInsets.zero,
                icon: const Icon(Icons.arrow_back, size: 32, color: Color(0xFFC471ED)),
                onPressed: _prevImage,
              ),
            ),
          ),
          // Right arrow
          Positioned(
            right: 10,
            top: MediaQuery.of(context).size.height / 2 - 30,
            child: Container(
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.4),
                shape: BoxShape.circle,
              ),
              child: IconButton(
                icon: const Icon(Icons.arrow_forward, size: 32, color: Color(0xFFC471ED)),
                onPressed: _nextImage,
              ),
            ),
          ),
          // Bottom buttons
          Align(
            alignment: Alignment.bottomCenter,
            child: Container(
              color: Colors.black.withOpacity(0.6),
              padding: const EdgeInsets.symmetric(vertical: 12),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  ElevatedButton(onPressed: _shareImage, style: _buttonStyle(), child: const Text("Share")),
                  ElevatedButton(onPressed: _saveImage, style: _buttonStyle(), child: const Text("Save")),
                  ElevatedButton(onPressed: _randomImage, style: _buttonStyle(), child: const Text("Random")),
                ],
              ),
            ),
          )
        ],
      ),
    );
  }
}
